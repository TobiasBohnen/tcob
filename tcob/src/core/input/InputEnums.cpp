// Copyright (c) 2025 Tobias Bohnen
//
// This software is released under the MIT License.
// https://opensource.org/licenses/MIT

#include "InputEnums.hpp"

namespace tcob::input {

auto convert_mouse_button(i32 button) -> mouse::button
{
    switch (button) {
    case SDL_BUTTON_LEFT: return mouse::button::Left;
    case SDL_BUTTON_RIGHT: return mouse::button::Right;
    case SDL_BUTTON_MIDDLE: return mouse::button::Middle;
    case SDL_BUTTON_X1: return mouse::button::X1;
    case SDL_BUTTON_X2: return mouse::button::X2;
    }

    return static_cast<mouse::button>(button);
}

auto convert_enum(mouse::button button) -> i32
{
    switch (button) {
    case mouse::button::None: return 0;
    case mouse::button::Left: return SDL_BUTTON_LEFT;
    case mouse::button::Middle: return SDL_BUTTON_MIDDLE;
    case mouse::button::Right: return SDL_BUTTON_RIGHT;
    case mouse::button::X1: return SDL_BUTTON_X1;
    case mouse::button::X2: return SDL_BUTTON_X2;
    }

    return 0;
}

auto convert_joystick_hat(i32 hat) -> joystick::hat
{
    switch (hat) {
    case SDL_HAT_CENTERED: return joystick::hat::Centered;
    case SDL_HAT_UP: return joystick::hat::Up;
    case SDL_HAT_RIGHT: return joystick::hat::Right;
    case SDL_HAT_DOWN: return joystick::hat::Down;
    case SDL_HAT_LEFT: return joystick::hat::Left;
    case SDL_HAT_RIGHTUP: return joystick::hat::RightUp;
    case SDL_HAT_RIGHTDOWN: return joystick::hat::RightDown;
    case SDL_HAT_LEFTUP: return joystick::hat::LeftUp;
    case SDL_HAT_LEFTDOWN: return joystick::hat::LeftDown;
    }

    return joystick::hat::Centered;
}

auto convert_enum(controller::button button) -> SDL_GameControllerButton
{
    switch (button) {
    case controller::button::Invalid: return SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_INVALID;
    case controller::button::A: return SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_A;
    case controller::button::B: return SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_B;
    case controller::button::X: return SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_X;
    case controller::button::Y: return SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_Y;
    case controller::button::Back: return SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_BACK;
    case controller::button::Guide: return SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_GUIDE;
    case controller::button::Start: return SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_START;
    case controller::button::LeftStick: return SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_LEFTSTICK;
    case controller::button::RightStick: return SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_RIGHTSTICK;
    case controller::button::LeftShoulder: return SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_LEFTSHOULDER;
    case controller::button::RightShoulder: return SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_RIGHTSHOULDER;
    case controller::button::DPadUp: return SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_DPAD_UP;
    case controller::button::DPadDown: return SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_DPAD_DOWN;
    case controller::button::DPadLeft: return SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_DPAD_LEFT;
    case controller::button::DPadRight: return SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_DPAD_RIGHT;
    case controller::button::Misc1: return SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_MISC1;
    case controller::button::Paddle1: return SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_PADDLE1;
    case controller::button::Paddle2: return SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_PADDLE2;
    case controller::button::Paddle3: return SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_PADDLE3;
    case controller::button::Paddle4: return SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_PADDLE4;
    case controller::button::Touchpad: return SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_TOUCHPAD;
    }

    return SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_INVALID;
}

auto convert_enum(SDL_GameControllerButton button) -> controller::button
{
    switch (button) {
    case SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_INVALID: return controller::button::Invalid;
    case SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_A: return controller::button::A;
    case SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_B: return controller::button::B;
    case SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_X: return controller::button::X;
    case SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_Y: return controller::button::Y;
    case SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_BACK: return controller::button::Back;
    case SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_GUIDE: return controller::button::Guide;
    case SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_START: return controller::button::Start;
    case SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_LEFTSTICK: return controller::button::LeftStick;
    case SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_RIGHTSTICK: return controller::button::RightStick;
    case SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_LEFTSHOULDER: return controller::button::LeftShoulder;
    case SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_RIGHTSHOULDER: return controller::button::RightShoulder;
    case SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_DPAD_UP: return controller::button::DPadUp;
    case SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_DPAD_DOWN: return controller::button::DPadDown;
    case SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_DPAD_LEFT: return controller::button::DPadLeft;
    case SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_DPAD_RIGHT: return controller::button::DPadRight;
    case SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_MISC1: return controller::button::Misc1;
    case SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_PADDLE1: return controller::button::Paddle1;
    case SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_PADDLE2: return controller::button::Paddle2;
    case SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_PADDLE3: return controller::button::Paddle3;
    case SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_PADDLE4: return controller::button::Paddle4;
    case SDL_GameControllerButton::SDL_CONTROLLER_BUTTON_TOUCHPAD: return controller::button::Touchpad;
    case SDL_CONTROLLER_BUTTON_MAX: break;
    }

    return controller::button::Invalid;
}

auto convert_enum(controller::axis axis) -> SDL_GameControllerAxis
{
    switch (axis) {
    case controller::axis::Invalid: return SDL_GameControllerAxis::SDL_CONTROLLER_AXIS_INVALID;
    case controller::axis::LeftX: return SDL_GameControllerAxis::SDL_CONTROLLER_AXIS_LEFTX;
    case controller::axis::LeftY: return SDL_GameControllerAxis::SDL_CONTROLLER_AXIS_LEFTY;
    case controller::axis::RightX: return SDL_GameControllerAxis::SDL_CONTROLLER_AXIS_RIGHTX;
    case controller::axis::RightY: return SDL_GameControllerAxis::SDL_CONTROLLER_AXIS_RIGHTY;
    case controller::axis::TriggerLeft: return SDL_GameControllerAxis::SDL_CONTROLLER_AXIS_TRIGGERLEFT;
    case controller::axis::TriggerRight: return SDL_GameControllerAxis::SDL_CONTROLLER_AXIS_TRIGGERRIGHT;
    }

    return SDL_GameControllerAxis::SDL_CONTROLLER_AXIS_INVALID;
}

auto convert_enum(SDL_GameControllerAxis axis) -> controller::axis
{
    switch (axis) {
    case SDL_CONTROLLER_AXIS_INVALID: return controller::axis::Invalid;
    case SDL_CONTROLLER_AXIS_LEFTX: return controller::axis::LeftX;
    case SDL_CONTROLLER_AXIS_LEFTY: return controller::axis::LeftY;
    case SDL_CONTROLLER_AXIS_RIGHTX: return controller::axis::RightX;
    case SDL_CONTROLLER_AXIS_RIGHTY: return controller::axis::RightY;
    case SDL_CONTROLLER_AXIS_TRIGGERLEFT: return controller::axis::TriggerLeft;
    case SDL_CONTROLLER_AXIS_TRIGGERRIGHT: return controller::axis::TriggerRight;
    case SDL_CONTROLLER_AXIS_MAX: return controller::axis::Invalid;
    }

    return controller::axis::Invalid;
}

auto convert_enum(key_mod mod) -> SDL_Keymod
{
    switch (mod) {
    case key_mod::None: return SDL_Keymod::KMOD_NONE;
    case key_mod::LeftShift: return SDL_Keymod::KMOD_LSHIFT;
    case key_mod::RightShift: return SDL_Keymod::KMOD_RSHIFT;
    case key_mod::LeftControl: return SDL_Keymod::KMOD_LCTRL;
    case key_mod::RightControl: return SDL_Keymod::KMOD_RCTRL;
    case key_mod::LeftAlt: return SDL_Keymod::KMOD_LALT;
    case key_mod::RightAlt: return SDL_Keymod::KMOD_RALT;
    case key_mod::LeftGui: return SDL_Keymod::KMOD_LGUI;
    case key_mod::RightGui: return SDL_Keymod::KMOD_RGUI;
    case key_mod::NumLock: return SDL_Keymod::KMOD_NUM;
    case key_mod::CapsLock: return SDL_Keymod::KMOD_CAPS;
    case key_mod::Mode: return SDL_Keymod::KMOD_MODE;
    case key_mod::Control: return SDL_Keymod::KMOD_CTRL;
    case key_mod::Shift: return SDL_Keymod::KMOD_SHIFT;
    case key_mod::Alt: return SDL_Keymod::KMOD_ALT;
    case key_mod::Gui: return SDL_Keymod::KMOD_GUI;
    case key_mod::Scroll: return SDL_Keymod::KMOD_SCROLL;
    }

    return SDL_Keymod::KMOD_NONE;
}

auto convert_enum(SDL_Keymod mod) -> key_mod
{
    switch (mod) {
    case KMOD_NONE: return key_mod::None;
    case KMOD_LSHIFT: return key_mod::LeftShift;
    case KMOD_RSHIFT: return key_mod::RightShift;
    case KMOD_LCTRL: return key_mod::LeftControl;
    case KMOD_RCTRL: return key_mod::RightControl;
    case KMOD_LALT: return key_mod::LeftAlt;
    case KMOD_RALT: return key_mod::RightAlt;
    case KMOD_LGUI: return key_mod::LeftGui;
    case KMOD_RGUI: return key_mod::RightGui;
    case KMOD_NUM: return key_mod::NumLock;
    case KMOD_CAPS: return key_mod::CapsLock;
    case KMOD_MODE: return key_mod::Mode;
    case KMOD_SCROLL: return key_mod::Scroll;
    case KMOD_CTRL: return key_mod::Control;
    case KMOD_SHIFT: return key_mod::Shift;
    case KMOD_ALT: return key_mod::Alt;
    case KMOD_GUI: return key_mod::Gui;
    }

    return static_cast<key_mod>(mod);
}

auto convert_enum(scan_code code) -> SDL_Scancode
{
    switch (code) {
    case scan_code::UNKNOWN: return SDL_SCANCODE_UNKNOWN;
    case scan_code::A: return SDL_SCANCODE_A;
    case scan_code::B: return SDL_SCANCODE_B;
    case scan_code::C: return SDL_SCANCODE_C;
    case scan_code::D: return SDL_SCANCODE_D;
    case scan_code::E: return SDL_SCANCODE_E;
    case scan_code::F: return SDL_SCANCODE_F;
    case scan_code::G: return SDL_SCANCODE_G;
    case scan_code::H: return SDL_SCANCODE_H;
    case scan_code::I: return SDL_SCANCODE_I;
    case scan_code::J: return SDL_SCANCODE_J;
    case scan_code::K: return SDL_SCANCODE_K;
    case scan_code::L: return SDL_SCANCODE_L;
    case scan_code::M: return SDL_SCANCODE_M;
    case scan_code::N: return SDL_SCANCODE_N;
    case scan_code::O: return SDL_SCANCODE_O;
    case scan_code::P: return SDL_SCANCODE_P;
    case scan_code::Q: return SDL_SCANCODE_Q;
    case scan_code::R: return SDL_SCANCODE_R;
    case scan_code::S: return SDL_SCANCODE_S;
    case scan_code::T: return SDL_SCANCODE_T;
    case scan_code::U: return SDL_SCANCODE_U;
    case scan_code::V: return SDL_SCANCODE_V;
    case scan_code::W: return SDL_SCANCODE_W;
    case scan_code::X: return SDL_SCANCODE_X;
    case scan_code::Y: return SDL_SCANCODE_Y;
    case scan_code::Z: return SDL_SCANCODE_Z;
    case scan_code::D1: return SDL_SCANCODE_1;
    case scan_code::D2: return SDL_SCANCODE_2;
    case scan_code::D3: return SDL_SCANCODE_3;
    case scan_code::D4: return SDL_SCANCODE_4;
    case scan_code::D5: return SDL_SCANCODE_5;
    case scan_code::D6: return SDL_SCANCODE_6;
    case scan_code::D7: return SDL_SCANCODE_7;
    case scan_code::D8: return SDL_SCANCODE_8;
    case scan_code::D9: return SDL_SCANCODE_9;
    case scan_code::D0: return SDL_SCANCODE_0;
    case scan_code::RETURN: return SDL_SCANCODE_RETURN;
    case scan_code::ESCAPE: return SDL_SCANCODE_ESCAPE;
    case scan_code::BACKSPACE: return SDL_SCANCODE_BACKSPACE;
    case scan_code::TAB: return SDL_SCANCODE_TAB;
    case scan_code::SPACE: return SDL_SCANCODE_SPACE;
    case scan_code::MINUS: return SDL_SCANCODE_MINUS;
    case scan_code::EQUALS: return SDL_SCANCODE_EQUALS;
    case scan_code::LEFTBRACKET: return SDL_SCANCODE_LEFTBRACKET;
    case scan_code::RIGHTBRACKET: return SDL_SCANCODE_RIGHTBRACKET;
    case scan_code::BACKSLASH: return SDL_SCANCODE_BACKSLASH;
    case scan_code::NONUSHASH: return SDL_SCANCODE_NONUSHASH;
    case scan_code::SEMICOLON: return SDL_SCANCODE_SEMICOLON;
    case scan_code::APOSTROPHE: return SDL_SCANCODE_APOSTROPHE;
    case scan_code::GRAVE: return SDL_SCANCODE_GRAVE;
    case scan_code::COMMA: return SDL_SCANCODE_COMMA;
    case scan_code::PERIOD: return SDL_SCANCODE_PERIOD;
    case scan_code::SLASH: return SDL_SCANCODE_SLASH;
    case scan_code::CAPSLOCK: return SDL_SCANCODE_CAPSLOCK;
    case scan_code::F1: return SDL_SCANCODE_F1;
    case scan_code::F2: return SDL_SCANCODE_F2;
    case scan_code::F3: return SDL_SCANCODE_F3;
    case scan_code::F4: return SDL_SCANCODE_F4;
    case scan_code::F5: return SDL_SCANCODE_F5;
    case scan_code::F6: return SDL_SCANCODE_F6;
    case scan_code::F7: return SDL_SCANCODE_F7;
    case scan_code::F8: return SDL_SCANCODE_F8;
    case scan_code::F9: return SDL_SCANCODE_F9;
    case scan_code::F10: return SDL_SCANCODE_F10;
    case scan_code::F11: return SDL_SCANCODE_F11;
    case scan_code::F12: return SDL_SCANCODE_F12;
    case scan_code::PRINTSCREEN: return SDL_SCANCODE_PRINTSCREEN;
    case scan_code::SCROLLLOCK: return SDL_SCANCODE_SCROLLLOCK;
    case scan_code::PAUSE: return SDL_SCANCODE_PAUSE;
    case scan_code::INSERT: return SDL_SCANCODE_INSERT;
    case scan_code::HOME: return SDL_SCANCODE_HOME;
    case scan_code::PAGEUP: return SDL_SCANCODE_PAGEUP;
    case scan_code::DEL: return SDL_SCANCODE_DELETE;
    case scan_code::END: return SDL_SCANCODE_END;
    case scan_code::PAGEDOWN: return SDL_SCANCODE_PAGEDOWN;
    case scan_code::RIGHT: return SDL_SCANCODE_RIGHT;
    case scan_code::LEFT: return SDL_SCANCODE_LEFT;
    case scan_code::DOWN: return SDL_SCANCODE_DOWN;
    case scan_code::UP: return SDL_SCANCODE_UP;
    case scan_code::NUMLOCKCLEAR: return SDL_SCANCODE_NUMLOCKCLEAR;
    case scan_code::KP_DIVIDE: return SDL_SCANCODE_KP_DIVIDE;
    case scan_code::KP_MULTIPLY: return SDL_SCANCODE_KP_MULTIPLY;
    case scan_code::KP_MINUS: return SDL_SCANCODE_KP_MINUS;
    case scan_code::KP_PLUS: return SDL_SCANCODE_KP_PLUS;
    case scan_code::KP_ENTER: return SDL_SCANCODE_KP_ENTER;
    case scan_code::KP_1: return SDL_SCANCODE_KP_1;
    case scan_code::KP_2: return SDL_SCANCODE_KP_2;
    case scan_code::KP_3: return SDL_SCANCODE_KP_3;
    case scan_code::KP_4: return SDL_SCANCODE_KP_4;
    case scan_code::KP_5: return SDL_SCANCODE_KP_5;
    case scan_code::KP_6: return SDL_SCANCODE_KP_6;
    case scan_code::KP_7: return SDL_SCANCODE_KP_7;
    case scan_code::KP_8: return SDL_SCANCODE_KP_8;
    case scan_code::KP_9: return SDL_SCANCODE_KP_9;
    case scan_code::KP_0: return SDL_SCANCODE_KP_0;
    case scan_code::KP_PERIOD: return SDL_SCANCODE_KP_PERIOD;
    case scan_code::NONUSBACKSLASH: return SDL_SCANCODE_NONUSBACKSLASH;
    case scan_code::APPLICATION: return SDL_SCANCODE_APPLICATION;
    case scan_code::POWER: return SDL_SCANCODE_POWER;
    case scan_code::KP_EQUALS: return SDL_SCANCODE_KP_EQUALS;
    case scan_code::F13: return SDL_SCANCODE_F13;
    case scan_code::F14: return SDL_SCANCODE_F14;
    case scan_code::F15: return SDL_SCANCODE_F15;
    case scan_code::F16: return SDL_SCANCODE_F16;
    case scan_code::F17: return SDL_SCANCODE_F17;
    case scan_code::F18: return SDL_SCANCODE_F18;
    case scan_code::F19: return SDL_SCANCODE_F19;
    case scan_code::F20: return SDL_SCANCODE_F20;
    case scan_code::F21: return SDL_SCANCODE_F21;
    case scan_code::F22: return SDL_SCANCODE_F22;
    case scan_code::F23: return SDL_SCANCODE_F23;
    case scan_code::F24: return SDL_SCANCODE_F24;
    case scan_code::EXECUTE: return SDL_SCANCODE_EXECUTE;
    case scan_code::HELP: return SDL_SCANCODE_HELP;
    case scan_code::MENU: return SDL_SCANCODE_MENU;
    case scan_code::SELECT: return SDL_SCANCODE_SELECT;
    case scan_code::STOP: return SDL_SCANCODE_STOP;
    case scan_code::AGAIN: return SDL_SCANCODE_AGAIN;
    case scan_code::UNDO: return SDL_SCANCODE_UNDO;
    case scan_code::CUT: return SDL_SCANCODE_CUT;
    case scan_code::COPY: return SDL_SCANCODE_COPY;
    case scan_code::PASTE: return SDL_SCANCODE_PASTE;
    case scan_code::FIND: return SDL_SCANCODE_FIND;
    case scan_code::MUTE: return SDL_SCANCODE_MUTE;
    case scan_code::VOLUMEUP: return SDL_SCANCODE_VOLUMEUP;
    case scan_code::VOLUMEDOWN: return SDL_SCANCODE_VOLUMEDOWN;
    case scan_code::KP_COMMA: return SDL_SCANCODE_KP_COMMA;
    case scan_code::KP_EQUALSAS400: return SDL_SCANCODE_KP_EQUALSAS400;
    case scan_code::INTERNATIONAL1: return SDL_SCANCODE_INTERNATIONAL1;
    case scan_code::INTERNATIONAL2: return SDL_SCANCODE_INTERNATIONAL2;
    case scan_code::INTERNATIONAL3: return SDL_SCANCODE_INTERNATIONAL3;
    case scan_code::INTERNATIONAL4: return SDL_SCANCODE_INTERNATIONAL4;
    case scan_code::INTERNATIONAL5: return SDL_SCANCODE_INTERNATIONAL5;
    case scan_code::INTERNATIONAL6: return SDL_SCANCODE_INTERNATIONAL6;
    case scan_code::INTERNATIONAL7: return SDL_SCANCODE_INTERNATIONAL7;
    case scan_code::INTERNATIONAL8: return SDL_SCANCODE_INTERNATIONAL8;
    case scan_code::INTERNATIONAL9: return SDL_SCANCODE_INTERNATIONAL9;
    case scan_code::LANG1: return SDL_SCANCODE_LANG1;
    case scan_code::LANG2: return SDL_SCANCODE_LANG2;
    case scan_code::LANG3: return SDL_SCANCODE_LANG3;
    case scan_code::LANG4: return SDL_SCANCODE_LANG4;
    case scan_code::LANG5: return SDL_SCANCODE_LANG5;
    case scan_code::LANG6: return SDL_SCANCODE_LANG6;
    case scan_code::LANG7: return SDL_SCANCODE_LANG7;
    case scan_code::LANG8: return SDL_SCANCODE_LANG8;
    case scan_code::LANG9: return SDL_SCANCODE_LANG9;
    case scan_code::ALTERASE: return SDL_SCANCODE_ALTERASE;
    case scan_code::SYSREQ: return SDL_SCANCODE_SYSREQ;
    case scan_code::CANCEL: return SDL_SCANCODE_CANCEL;
    case scan_code::CLEAR: return SDL_SCANCODE_CLEAR;
    case scan_code::PRIOR: return SDL_SCANCODE_PRIOR;
    case scan_code::RETURN2: return SDL_SCANCODE_RETURN2;
    case scan_code::SEPARATOR: return SDL_SCANCODE_SEPARATOR;
    case scan_code::KEY_OUT: return SDL_SCANCODE_OUT;
    case scan_code::OPER: return SDL_SCANCODE_OPER;
    case scan_code::CLEARAGAIN: return SDL_SCANCODE_CLEARAGAIN;
    case scan_code::CRSEL: return SDL_SCANCODE_CRSEL;
    case scan_code::EXSEL: return SDL_SCANCODE_EXSEL;
    case scan_code::KP_00: return SDL_SCANCODE_KP_00;
    case scan_code::KP_000: return SDL_SCANCODE_KP_000;
    case scan_code::THOUSANDSSEPARATOR: return SDL_SCANCODE_THOUSANDSSEPARATOR;
    case scan_code::DECIMALSEPARATOR: return SDL_SCANCODE_DECIMALSEPARATOR;
    case scan_code::CURRENCYUNIT: return SDL_SCANCODE_CURRENCYUNIT;
    case scan_code::CURRENCYSUBUNIT: return SDL_SCANCODE_CURRENCYSUBUNIT;
    case scan_code::KP_LEFTPAREN: return SDL_SCANCODE_KP_LEFTPAREN;
    case scan_code::KP_RIGHTPAREN: return SDL_SCANCODE_KP_RIGHTPAREN;
    case scan_code::KP_LEFTBRACE: return SDL_SCANCODE_KP_LEFTBRACE;
    case scan_code::KP_RIGHTBRACE: return SDL_SCANCODE_KP_RIGHTBRACE;
    case scan_code::KP_TAB: return SDL_SCANCODE_KP_TAB;
    case scan_code::KP_BACKSPACE: return SDL_SCANCODE_KP_BACKSPACE;
    case scan_code::KP_A: return SDL_SCANCODE_KP_A;
    case scan_code::KP_B: return SDL_SCANCODE_KP_B;
    case scan_code::KP_C: return SDL_SCANCODE_KP_C;
    case scan_code::KP_D: return SDL_SCANCODE_KP_D;
    case scan_code::KP_E: return SDL_SCANCODE_KP_E;
    case scan_code::KP_F: return SDL_SCANCODE_KP_F;
    case scan_code::KP_XOR: return SDL_SCANCODE_KP_XOR;
    case scan_code::KP_POWER: return SDL_SCANCODE_KP_POWER;
    case scan_code::KP_PERCENT: return SDL_SCANCODE_KP_PERCENT;
    case scan_code::KP_LESS: return SDL_SCANCODE_KP_LESS;
    case scan_code::KP_GREATER: return SDL_SCANCODE_KP_GREATER;
    case scan_code::KP_AMPERSAND: return SDL_SCANCODE_KP_AMPERSAND;
    case scan_code::KP_DBLAMPERSAND: return SDL_SCANCODE_KP_DBLAMPERSAND;
    case scan_code::KP_VERTICALBAR: return SDL_SCANCODE_KP_VERTICALBAR;
    case scan_code::KP_DBLVERTICALBAR: return SDL_SCANCODE_KP_DBLVERTICALBAR;
    case scan_code::KP_COLON: return SDL_SCANCODE_KP_COLON;
    case scan_code::KP_HASH: return SDL_SCANCODE_KP_HASH;
    case scan_code::KP_SPACE: return SDL_SCANCODE_KP_SPACE;
    case scan_code::KP_AT: return SDL_SCANCODE_KP_AT;
    case scan_code::KP_EXCLAM: return SDL_SCANCODE_KP_EXCLAM;
    case scan_code::KP_MEMSTORE: return SDL_SCANCODE_KP_MEMSTORE;
    case scan_code::KP_MEMRECALL: return SDL_SCANCODE_KP_MEMRECALL;
    case scan_code::KP_MEMCLEAR: return SDL_SCANCODE_KP_MEMCLEAR;
    case scan_code::KP_MEMADD: return SDL_SCANCODE_KP_MEMADD;
    case scan_code::KP_MEMSUBTRACT: return SDL_SCANCODE_KP_MEMSUBTRACT;
    case scan_code::KP_MEMMULTIPLY: return SDL_SCANCODE_KP_MEMMULTIPLY;
    case scan_code::KP_MEMDIVIDE: return SDL_SCANCODE_KP_MEMDIVIDE;
    case scan_code::KP_PLUSMINUS: return SDL_SCANCODE_KP_PLUSMINUS;
    case scan_code::KP_CLEAR: return SDL_SCANCODE_KP_CLEAR;
    case scan_code::KP_CLEARENTRY: return SDL_SCANCODE_KP_CLEARENTRY;
    case scan_code::KP_BINARY: return SDL_SCANCODE_KP_BINARY;
    case scan_code::KP_OCTAL: return SDL_SCANCODE_KP_OCTAL;
    case scan_code::KP_DECIMAL: return SDL_SCANCODE_KP_DECIMAL;
    case scan_code::KP_HEXADECIMAL: return SDL_SCANCODE_KP_HEXADECIMAL;
    case scan_code::LCTRL: return SDL_SCANCODE_LCTRL;
    case scan_code::LSHIFT: return SDL_SCANCODE_LSHIFT;
    case scan_code::LALT: return SDL_SCANCODE_LALT;
    case scan_code::LGUI: return SDL_SCANCODE_LGUI;
    case scan_code::RCTRL: return SDL_SCANCODE_RCTRL;
    case scan_code::RSHIFT: return SDL_SCANCODE_RSHIFT;
    case scan_code::RALT: return SDL_SCANCODE_RALT;
    case scan_code::RGUI: return SDL_SCANCODE_RGUI;
    case scan_code::MODE: return SDL_SCANCODE_MODE;
    case scan_code::AUDIONEXT: return SDL_SCANCODE_AUDIONEXT;
    case scan_code::AUDIOPREV: return SDL_SCANCODE_AUDIOPREV;
    case scan_code::AUDIOSTOP: return SDL_SCANCODE_AUDIOSTOP;
    case scan_code::AUDIOPLAY: return SDL_SCANCODE_AUDIOPLAY;
    case scan_code::AUDIOMUTE: return SDL_SCANCODE_AUDIOMUTE;
    case scan_code::MEDIASELECT: return SDL_SCANCODE_MEDIASELECT;
    case scan_code::WWW: return SDL_SCANCODE_WWW;
    case scan_code::MAIL: return SDL_SCANCODE_MAIL;
    case scan_code::CALCULATOR: return SDL_SCANCODE_CALCULATOR;
    case scan_code::COMPUTER: return SDL_SCANCODE_COMPUTER;
    case scan_code::AC_SEARCH: return SDL_SCANCODE_AC_SEARCH;
    case scan_code::AC_HOME: return SDL_SCANCODE_AC_HOME;
    case scan_code::AC_BACK: return SDL_SCANCODE_AC_BACK;
    case scan_code::AC_FORWARD: return SDL_SCANCODE_AC_FORWARD;
    case scan_code::AC_STOP: return SDL_SCANCODE_AC_STOP;
    case scan_code::AC_REFRESH: return SDL_SCANCODE_AC_REFRESH;
    case scan_code::AC_BOOKMARKS: return SDL_SCANCODE_AC_BOOKMARKS;
    case scan_code::BRIGHTNESSDOWN: return SDL_SCANCODE_BRIGHTNESSDOWN;
    case scan_code::BRIGHTNESSUP: return SDL_SCANCODE_BRIGHTNESSUP;
    case scan_code::DISPLAYSWITCH: return SDL_SCANCODE_DISPLAYSWITCH;
    case scan_code::KBDILLUMTOGGLE: return SDL_SCANCODE_KBDILLUMTOGGLE;
    case scan_code::KBDILLUMDOWN: return SDL_SCANCODE_KBDILLUMDOWN;
    case scan_code::KBDILLUMUP: return SDL_SCANCODE_KBDILLUMUP;
    case scan_code::EJECT: return SDL_SCANCODE_EJECT;
    case scan_code::SLEEP: return SDL_SCANCODE_SLEEP;
    case scan_code::APP1: return SDL_SCANCODE_APP1;
    case scan_code::APP2: return SDL_SCANCODE_APP2;
    case scan_code::AUDIOREWIND: return SDL_SCANCODE_AUDIOREWIND;
    case scan_code::AUDIOFASTFORWARD: return SDL_SCANCODE_AUDIOFASTFORWARD;
    case scan_code::SOFTLEFT: return SDL_SCANCODE_SOFTLEFT;
    case scan_code::SOFTRIGHT: return SDL_SCANCODE_SOFTRIGHT;
    case scan_code::CALL: return SDL_SCANCODE_CALL;
    case scan_code::ENDCALL: return SDL_SCANCODE_ENDCALL;
    case scan_code::SDL_NUM_SCANCODES: break;
    }

    return SDL_SCANCODE_UNKNOWN;
}

auto convert_enum(SDL_Scancode code) -> scan_code
{
    switch (code) {
    case SDL_SCANCODE_UNKNOWN: return scan_code::UNKNOWN;
    case SDL_SCANCODE_A: return scan_code::A;
    case SDL_SCANCODE_B: return scan_code::B;
    case SDL_SCANCODE_C: return scan_code::C;
    case SDL_SCANCODE_D: return scan_code::D;
    case SDL_SCANCODE_E: return scan_code::E;
    case SDL_SCANCODE_F: return scan_code::F;
    case SDL_SCANCODE_G: return scan_code::G;
    case SDL_SCANCODE_H: return scan_code::H;
    case SDL_SCANCODE_I: return scan_code::I;
    case SDL_SCANCODE_J: return scan_code::J;
    case SDL_SCANCODE_K: return scan_code::K;
    case SDL_SCANCODE_L: return scan_code::L;
    case SDL_SCANCODE_M: return scan_code::M;
    case SDL_SCANCODE_N: return scan_code::N;
    case SDL_SCANCODE_O: return scan_code::O;
    case SDL_SCANCODE_P: return scan_code::P;
    case SDL_SCANCODE_Q: return scan_code::Q;
    case SDL_SCANCODE_R: return scan_code::R;
    case SDL_SCANCODE_S: return scan_code::S;
    case SDL_SCANCODE_T: return scan_code::T;
    case SDL_SCANCODE_U: return scan_code::U;
    case SDL_SCANCODE_V: return scan_code::V;
    case SDL_SCANCODE_W: return scan_code::W;
    case SDL_SCANCODE_X: return scan_code::X;
    case SDL_SCANCODE_Y: return scan_code::Y;
    case SDL_SCANCODE_Z: return scan_code::Z;
    case SDL_SCANCODE_1: return scan_code::D1;
    case SDL_SCANCODE_2: return scan_code::D2;
    case SDL_SCANCODE_3: return scan_code::D3;
    case SDL_SCANCODE_4: return scan_code::D4;
    case SDL_SCANCODE_5: return scan_code::D5;
    case SDL_SCANCODE_6: return scan_code::D6;
    case SDL_SCANCODE_7: return scan_code::D7;
    case SDL_SCANCODE_8: return scan_code::D8;
    case SDL_SCANCODE_9: return scan_code::D9;
    case SDL_SCANCODE_0: return scan_code::D0;
    case SDL_SCANCODE_RETURN: return scan_code::RETURN;
    case SDL_SCANCODE_ESCAPE: return scan_code::ESCAPE;
    case SDL_SCANCODE_BACKSPACE: return scan_code::BACKSPACE;
    case SDL_SCANCODE_TAB: return scan_code::TAB;
    case SDL_SCANCODE_SPACE: return scan_code::SPACE;
    case SDL_SCANCODE_MINUS: return scan_code::MINUS;
    case SDL_SCANCODE_EQUALS: return scan_code::EQUALS;
    case SDL_SCANCODE_LEFTBRACKET: return scan_code::LEFTBRACKET;
    case SDL_SCANCODE_RIGHTBRACKET: return scan_code::RIGHTBRACKET;
    case SDL_SCANCODE_BACKSLASH: return scan_code::BACKSLASH;
    case SDL_SCANCODE_NONUSHASH: return scan_code::NONUSHASH;
    case SDL_SCANCODE_SEMICOLON: return scan_code::SEMICOLON;
    case SDL_SCANCODE_APOSTROPHE: return scan_code::APOSTROPHE;
    case SDL_SCANCODE_GRAVE: return scan_code::GRAVE;
    case SDL_SCANCODE_COMMA: return scan_code::COMMA;
    case SDL_SCANCODE_PERIOD: return scan_code::PERIOD;
    case SDL_SCANCODE_SLASH: return scan_code::SLASH;
    case SDL_SCANCODE_CAPSLOCK: return scan_code::CAPSLOCK;
    case SDL_SCANCODE_F1: return scan_code::F1;
    case SDL_SCANCODE_F2: return scan_code::F2;
    case SDL_SCANCODE_F3: return scan_code::F3;
    case SDL_SCANCODE_F4: return scan_code::F4;
    case SDL_SCANCODE_F5: return scan_code::F5;
    case SDL_SCANCODE_F6: return scan_code::F6;
    case SDL_SCANCODE_F7: return scan_code::F7;
    case SDL_SCANCODE_F8: return scan_code::F8;
    case SDL_SCANCODE_F9: return scan_code::F9;
    case SDL_SCANCODE_F10: return scan_code::F10;
    case SDL_SCANCODE_F11: return scan_code::F11;
    case SDL_SCANCODE_F12: return scan_code::F12;
    case SDL_SCANCODE_PRINTSCREEN: return scan_code::PRINTSCREEN;
    case SDL_SCANCODE_SCROLLLOCK: return scan_code::SCROLLLOCK;
    case SDL_SCANCODE_PAUSE: return scan_code::PAUSE;
    case SDL_SCANCODE_INSERT: return scan_code::INSERT;
    case SDL_SCANCODE_HOME: return scan_code::HOME;
    case SDL_SCANCODE_PAGEUP: return scan_code::PAGEUP;
    case SDL_SCANCODE_DELETE: return scan_code::DEL;
    case SDL_SCANCODE_END: return scan_code::END;
    case SDL_SCANCODE_PAGEDOWN: return scan_code::PAGEDOWN;
    case SDL_SCANCODE_RIGHT: return scan_code::RIGHT;
    case SDL_SCANCODE_LEFT: return scan_code::LEFT;
    case SDL_SCANCODE_DOWN: return scan_code::DOWN;
    case SDL_SCANCODE_UP: return scan_code::UP;
    case SDL_SCANCODE_NUMLOCKCLEAR: return scan_code::NUMLOCKCLEAR;
    case SDL_SCANCODE_KP_DIVIDE: return scan_code::KP_DIVIDE;
    case SDL_SCANCODE_KP_MULTIPLY: return scan_code::KP_MULTIPLY;
    case SDL_SCANCODE_KP_MINUS: return scan_code::KP_MINUS;
    case SDL_SCANCODE_KP_PLUS: return scan_code::KP_PLUS;
    case SDL_SCANCODE_KP_ENTER: return scan_code::KP_ENTER;
    case SDL_SCANCODE_KP_1: return scan_code::KP_1;
    case SDL_SCANCODE_KP_2: return scan_code::KP_2;
    case SDL_SCANCODE_KP_3: return scan_code::KP_3;
    case SDL_SCANCODE_KP_4: return scan_code::KP_4;
    case SDL_SCANCODE_KP_5: return scan_code::KP_5;
    case SDL_SCANCODE_KP_6: return scan_code::KP_6;
    case SDL_SCANCODE_KP_7: return scan_code::KP_7;
    case SDL_SCANCODE_KP_8: return scan_code::KP_8;
    case SDL_SCANCODE_KP_9: return scan_code::KP_9;
    case SDL_SCANCODE_KP_0: return scan_code::KP_0;
    case SDL_SCANCODE_KP_PERIOD: return scan_code::KP_PERIOD;
    case SDL_SCANCODE_NONUSBACKSLASH: return scan_code::NONUSBACKSLASH;
    case SDL_SCANCODE_APPLICATION: return scan_code::APPLICATION;
    case SDL_SCANCODE_POWER: return scan_code::POWER;
    case SDL_SCANCODE_KP_EQUALS: return scan_code::KP_EQUALS;
    case SDL_SCANCODE_F13: return scan_code::F13;
    case SDL_SCANCODE_F14: return scan_code::F14;
    case SDL_SCANCODE_F15: return scan_code::F15;
    case SDL_SCANCODE_F16: return scan_code::F16;
    case SDL_SCANCODE_F17: return scan_code::F17;
    case SDL_SCANCODE_F18: return scan_code::F18;
    case SDL_SCANCODE_F19: return scan_code::F19;
    case SDL_SCANCODE_F20: return scan_code::F20;
    case SDL_SCANCODE_F21: return scan_code::F21;
    case SDL_SCANCODE_F22: return scan_code::F22;
    case SDL_SCANCODE_F23: return scan_code::F23;
    case SDL_SCANCODE_F24: return scan_code::F24;
    case SDL_SCANCODE_EXECUTE: return scan_code::EXECUTE;
    case SDL_SCANCODE_HELP: return scan_code::HELP;
    case SDL_SCANCODE_MENU: return scan_code::MENU;
    case SDL_SCANCODE_SELECT: return scan_code::SELECT;
    case SDL_SCANCODE_STOP: return scan_code::STOP;
    case SDL_SCANCODE_AGAIN: return scan_code::AGAIN;
    case SDL_SCANCODE_UNDO: return scan_code::UNDO;
    case SDL_SCANCODE_CUT: return scan_code::CUT;
    case SDL_SCANCODE_COPY: return scan_code::COPY;
    case SDL_SCANCODE_PASTE: return scan_code::PASTE;
    case SDL_SCANCODE_FIND: return scan_code::FIND;
    case SDL_SCANCODE_MUTE: return scan_code::MUTE;
    case SDL_SCANCODE_VOLUMEUP: return scan_code::VOLUMEUP;
    case SDL_SCANCODE_VOLUMEDOWN: return scan_code::VOLUMEDOWN;
    case SDL_SCANCODE_KP_COMMA: return scan_code::KP_COMMA;
    case SDL_SCANCODE_KP_EQUALSAS400: return scan_code::KP_EQUALSAS400;
    case SDL_SCANCODE_INTERNATIONAL1: return scan_code::INTERNATIONAL1;
    case SDL_SCANCODE_INTERNATIONAL2: return scan_code::INTERNATIONAL2;
    case SDL_SCANCODE_INTERNATIONAL3: return scan_code::INTERNATIONAL3;
    case SDL_SCANCODE_INTERNATIONAL4: return scan_code::INTERNATIONAL4;
    case SDL_SCANCODE_INTERNATIONAL5: return scan_code::INTERNATIONAL5;
    case SDL_SCANCODE_INTERNATIONAL6: return scan_code::INTERNATIONAL6;
    case SDL_SCANCODE_INTERNATIONAL7: return scan_code::INTERNATIONAL7;
    case SDL_SCANCODE_INTERNATIONAL8: return scan_code::INTERNATIONAL8;
    case SDL_SCANCODE_INTERNATIONAL9: return scan_code::INTERNATIONAL9;
    case SDL_SCANCODE_LANG1: return scan_code::LANG1;
    case SDL_SCANCODE_LANG2: return scan_code::LANG2;
    case SDL_SCANCODE_LANG3: return scan_code::LANG3;
    case SDL_SCANCODE_LANG4: return scan_code::LANG4;
    case SDL_SCANCODE_LANG5: return scan_code::LANG5;
    case SDL_SCANCODE_LANG6: return scan_code::LANG6;
    case SDL_SCANCODE_LANG7: return scan_code::LANG7;
    case SDL_SCANCODE_LANG8: return scan_code::LANG8;
    case SDL_SCANCODE_LANG9: return scan_code::LANG9;
    case SDL_SCANCODE_ALTERASE: return scan_code::ALTERASE;
    case SDL_SCANCODE_SYSREQ: return scan_code::SYSREQ;
    case SDL_SCANCODE_CANCEL: return scan_code::CANCEL;
    case SDL_SCANCODE_CLEAR: return scan_code::CLEAR;
    case SDL_SCANCODE_PRIOR: return scan_code::PRIOR;
    case SDL_SCANCODE_RETURN2: return scan_code::RETURN2;
    case SDL_SCANCODE_SEPARATOR: return scan_code::SEPARATOR;
    case SDL_SCANCODE_OUT: return scan_code::KEY_OUT;
    case SDL_SCANCODE_OPER: return scan_code::OPER;
    case SDL_SCANCODE_CLEARAGAIN: return scan_code::CLEARAGAIN;
    case SDL_SCANCODE_CRSEL: return scan_code::CRSEL;
    case SDL_SCANCODE_EXSEL: return scan_code::EXSEL;
    case SDL_SCANCODE_KP_00: return scan_code::KP_00;
    case SDL_SCANCODE_KP_000: return scan_code::KP_000;
    case SDL_SCANCODE_THOUSANDSSEPARATOR: return scan_code::THOUSANDSSEPARATOR;
    case SDL_SCANCODE_DECIMALSEPARATOR: return scan_code::DECIMALSEPARATOR;
    case SDL_SCANCODE_CURRENCYUNIT: return scan_code::CURRENCYUNIT;
    case SDL_SCANCODE_CURRENCYSUBUNIT: return scan_code::CURRENCYSUBUNIT;
    case SDL_SCANCODE_KP_LEFTPAREN: return scan_code::KP_LEFTPAREN;
    case SDL_SCANCODE_KP_RIGHTPAREN: return scan_code::KP_RIGHTPAREN;
    case SDL_SCANCODE_KP_LEFTBRACE: return scan_code::KP_LEFTBRACE;
    case SDL_SCANCODE_KP_RIGHTBRACE: return scan_code::KP_RIGHTBRACE;
    case SDL_SCANCODE_KP_TAB: return scan_code::KP_TAB;
    case SDL_SCANCODE_KP_BACKSPACE: return scan_code::KP_BACKSPACE;
    case SDL_SCANCODE_KP_A: return scan_code::KP_A;
    case SDL_SCANCODE_KP_B: return scan_code::KP_B;
    case SDL_SCANCODE_KP_C: return scan_code::KP_C;
    case SDL_SCANCODE_KP_D: return scan_code::KP_D;
    case SDL_SCANCODE_KP_E: return scan_code::KP_E;
    case SDL_SCANCODE_KP_F: return scan_code::KP_F;
    case SDL_SCANCODE_KP_XOR: return scan_code::KP_XOR;
    case SDL_SCANCODE_KP_POWER: return scan_code::KP_POWER;
    case SDL_SCANCODE_KP_PERCENT: return scan_code::KP_PERCENT;
    case SDL_SCANCODE_KP_LESS: return scan_code::KP_LESS;
    case SDL_SCANCODE_KP_GREATER: return scan_code::KP_GREATER;
    case SDL_SCANCODE_KP_AMPERSAND: return scan_code::KP_AMPERSAND;
    case SDL_SCANCODE_KP_DBLAMPERSAND: return scan_code::KP_DBLAMPERSAND;
    case SDL_SCANCODE_KP_VERTICALBAR: return scan_code::KP_VERTICALBAR;
    case SDL_SCANCODE_KP_DBLVERTICALBAR: return scan_code::KP_DBLVERTICALBAR;
    case SDL_SCANCODE_KP_COLON: return scan_code::KP_COLON;
    case SDL_SCANCODE_KP_HASH: return scan_code::KP_HASH;
    case SDL_SCANCODE_KP_SPACE: return scan_code::KP_SPACE;
    case SDL_SCANCODE_KP_AT: return scan_code::KP_AT;
    case SDL_SCANCODE_KP_EXCLAM: return scan_code::KP_EXCLAM;
    case SDL_SCANCODE_KP_MEMSTORE: return scan_code::KP_MEMSTORE;
    case SDL_SCANCODE_KP_MEMRECALL: return scan_code::KP_MEMRECALL;
    case SDL_SCANCODE_KP_MEMCLEAR: return scan_code::KP_MEMCLEAR;
    case SDL_SCANCODE_KP_MEMADD: return scan_code::KP_MEMADD;
    case SDL_SCANCODE_KP_MEMSUBTRACT: return scan_code::KP_MEMSUBTRACT;
    case SDL_SCANCODE_KP_MEMMULTIPLY: return scan_code::KP_MEMMULTIPLY;
    case SDL_SCANCODE_KP_MEMDIVIDE: return scan_code::KP_MEMDIVIDE;
    case SDL_SCANCODE_KP_PLUSMINUS: return scan_code::KP_PLUSMINUS;
    case SDL_SCANCODE_KP_CLEAR: return scan_code::KP_CLEAR;
    case SDL_SCANCODE_KP_CLEARENTRY: return scan_code::KP_CLEARENTRY;
    case SDL_SCANCODE_KP_BINARY: return scan_code::KP_BINARY;
    case SDL_SCANCODE_KP_OCTAL: return scan_code::KP_OCTAL;
    case SDL_SCANCODE_KP_DECIMAL: return scan_code::KP_DECIMAL;
    case SDL_SCANCODE_KP_HEXADECIMAL: return scan_code::KP_HEXADECIMAL;
    case SDL_SCANCODE_LCTRL: return scan_code::LCTRL;
    case SDL_SCANCODE_LSHIFT: return scan_code::LSHIFT;
    case SDL_SCANCODE_LALT: return scan_code::LALT;
    case SDL_SCANCODE_LGUI: return scan_code::LGUI;
    case SDL_SCANCODE_RCTRL: return scan_code::RCTRL;
    case SDL_SCANCODE_RSHIFT: return scan_code::RSHIFT;
    case SDL_SCANCODE_RALT: return scan_code::RALT;
    case SDL_SCANCODE_RGUI: return scan_code::RGUI;
    case SDL_SCANCODE_MODE: return scan_code::MODE;
    case SDL_SCANCODE_AUDIONEXT: return scan_code::AUDIONEXT;
    case SDL_SCANCODE_AUDIOPREV: return scan_code::AUDIOPREV;
    case SDL_SCANCODE_AUDIOSTOP: return scan_code::AUDIOSTOP;
    case SDL_SCANCODE_AUDIOPLAY: return scan_code::AUDIOPLAY;
    case SDL_SCANCODE_AUDIOMUTE: return scan_code::AUDIOMUTE;
    case SDL_SCANCODE_MEDIASELECT: return scan_code::MEDIASELECT;
    case SDL_SCANCODE_WWW: return scan_code::WWW;
    case SDL_SCANCODE_MAIL: return scan_code::MAIL;
    case SDL_SCANCODE_CALCULATOR: return scan_code::CALCULATOR;
    case SDL_SCANCODE_COMPUTER: return scan_code::COMPUTER;
    case SDL_SCANCODE_AC_SEARCH: return scan_code::AC_SEARCH;
    case SDL_SCANCODE_AC_HOME: return scan_code::AC_HOME;
    case SDL_SCANCODE_AC_BACK: return scan_code::AC_BACK;
    case SDL_SCANCODE_AC_FORWARD: return scan_code::AC_FORWARD;
    case SDL_SCANCODE_AC_STOP: return scan_code::AC_STOP;
    case SDL_SCANCODE_AC_REFRESH: return scan_code::AC_REFRESH;
    case SDL_SCANCODE_AC_BOOKMARKS: return scan_code::AC_BOOKMARKS;
    case SDL_SCANCODE_BRIGHTNESSDOWN: return scan_code::BRIGHTNESSDOWN;
    case SDL_SCANCODE_BRIGHTNESSUP: return scan_code::BRIGHTNESSUP;
    case SDL_SCANCODE_DISPLAYSWITCH: return scan_code::DISPLAYSWITCH;
    case SDL_SCANCODE_KBDILLUMTOGGLE: return scan_code::KBDILLUMTOGGLE;
    case SDL_SCANCODE_KBDILLUMDOWN: return scan_code::KBDILLUMDOWN;
    case SDL_SCANCODE_KBDILLUMUP: return scan_code::KBDILLUMUP;
    case SDL_SCANCODE_EJECT: return scan_code::EJECT;
    case SDL_SCANCODE_SLEEP: return scan_code::SLEEP;
    case SDL_SCANCODE_APP1: return scan_code::APP1;
    case SDL_SCANCODE_APP2: return scan_code::APP2;
    case SDL_SCANCODE_AUDIOREWIND: return scan_code::AUDIOREWIND;
    case SDL_SCANCODE_AUDIOFASTFORWARD: return scan_code::AUDIOFASTFORWARD;
    case SDL_SCANCODE_SOFTLEFT: return scan_code::SOFTLEFT;
    case SDL_SCANCODE_SOFTRIGHT: return scan_code::SOFTRIGHT;
    case SDL_SCANCODE_CALL: return scan_code::CALL;
    case SDL_SCANCODE_ENDCALL: return scan_code::ENDCALL;
    case SDL_NUM_SCANCODES: break;
    }
    return static_cast<scan_code>(code);
}

auto convert_enum(key_code code) -> SDL_Keycode
{
    switch (code) {
    case key_code::UNKNOWN: return SDLK_UNKNOWN;
    case key_code::RETURN: return SDLK_RETURN;
    case key_code::ESCAPE: return SDLK_ESCAPE;
    case key_code::BACKSPACE: return SDLK_BACKSPACE;
    case key_code::TAB: return SDLK_TAB;
    case key_code::SPACE: return SDLK_SPACE;
    case key_code::EXCLAIM: return SDLK_EXCLAIM;
    case key_code::QUOTEDBL: return SDLK_QUOTEDBL;
    case key_code::HASH: return SDLK_HASH;
    case key_code::PERCENT: return SDLK_PERCENT;
    case key_code::DOLLAR: return SDLK_DOLLAR;
    case key_code::AMPERSAND: return SDLK_AMPERSAND;
    case key_code::QUOTE: return SDLK_QUOTE;
    case key_code::LEFTPAREN: return SDLK_LEFTPAREN;
    case key_code::RIGHTPAREN: return SDLK_RIGHTPAREN;
    case key_code::ASTERISK: return SDLK_ASTERISK;
    case key_code::PLUS: return SDLK_PLUS;
    case key_code::COMMA: return SDLK_COMMA;
    case key_code::MINUS: return SDLK_MINUS;
    case key_code::PERIOD: return SDLK_PERIOD;
    case key_code::SLASH: return SDLK_SLASH;
    case key_code::D0: return SDLK_0;
    case key_code::D1: return SDLK_1;
    case key_code::D2: return SDLK_2;
    case key_code::D3: return SDLK_3;
    case key_code::D4: return SDLK_4;
    case key_code::D5: return SDLK_5;
    case key_code::D6: return SDLK_6;
    case key_code::D7: return SDLK_7;
    case key_code::D8: return SDLK_8;
    case key_code::D9: return SDLK_9;
    case key_code::COLON: return SDLK_COLON;
    case key_code::SEMICOLON: return SDLK_SEMICOLON;
    case key_code::LESS: return SDLK_LESS;
    case key_code::EQUALS: return SDLK_EQUALS;
    case key_code::GREATER: return SDLK_GREATER;
    case key_code::QUESTION: return SDLK_QUESTION;
    case key_code::AT: return SDLK_AT;
    case key_code::LEFTBRACKET: return SDLK_LEFTBRACKET;
    case key_code::BACKSLASH: return SDLK_BACKSLASH;
    case key_code::RIGHTBRACKET: return SDLK_RIGHTBRACKET;
    case key_code::CARET: return SDLK_CARET;
    case key_code::UNDERSCORE: return SDLK_UNDERSCORE;
    case key_code::BACKQUOTE: return SDLK_BACKQUOTE;

    // Alphabet keys
    case key_code::a: return SDLK_a;
    case key_code::b: return SDLK_b;
    case key_code::c: return SDLK_c;
    case key_code::d: return SDLK_d;
    case key_code::e: return SDLK_e;
    case key_code::f: return SDLK_f;
    case key_code::g: return SDLK_g;
    case key_code::h: return SDLK_h;
    case key_code::i: return SDLK_i;
    case key_code::j: return SDLK_j;
    case key_code::k: return SDLK_k;
    case key_code::l: return SDLK_l;
    case key_code::m: return SDLK_m;
    case key_code::n: return SDLK_n;
    case key_code::o: return SDLK_o;
    case key_code::p: return SDLK_p;
    case key_code::q: return SDLK_q;
    case key_code::r: return SDLK_r;
    case key_code::s: return SDLK_s;
    case key_code::t: return SDLK_t;
    case key_code::u: return SDLK_u;
    case key_code::v: return SDLK_v;
    case key_code::w: return SDLK_w;
    case key_code::x: return SDLK_x;
    case key_code::y: return SDLK_y;
    case key_code::z: return SDLK_z;

    // Function keys
    case key_code::CAPSLOCK: return SDLK_CAPSLOCK;
    case key_code::F1: return SDLK_F1;
    case key_code::F2: return SDLK_F2;
    case key_code::F3: return SDLK_F3;
    case key_code::F4: return SDLK_F4;
    case key_code::F5: return SDLK_F5;
    case key_code::F6: return SDLK_F6;
    case key_code::F7: return SDLK_F7;
    case key_code::F8: return SDLK_F8;
    case key_code::F9: return SDLK_F9;
    case key_code::F10: return SDLK_F10;
    case key_code::F11: return SDLK_F11;
    case key_code::F12: return SDLK_F12;

    // Control and other keys
    case key_code::PRINTSCREEN: return SDLK_PRINTSCREEN;
    case key_code::SCROLLLOCK: return SDLK_SCROLLLOCK;
    case key_code::PAUSE: return SDLK_PAUSE;
    case key_code::INSERT: return SDLK_INSERT;
    case key_code::HOME: return SDLK_HOME;
    case key_code::PAGEUP: return SDLK_PAGEUP;
    case key_code::DEL: return SDLK_DELETE;
    case key_code::END: return SDLK_END;
    case key_code::PAGEDOWN: return SDLK_PAGEDOWN;
    case key_code::RIGHT: return SDLK_RIGHT;
    case key_code::LEFT: return SDLK_LEFT;
    case key_code::DOWN: return SDLK_DOWN;
    case key_code::UP: return SDLK_UP;

    // Numpad keys
    case key_code::NUMLOCKCLEAR: return SDLK_NUMLOCKCLEAR;
    case key_code::KP_DIVIDE: return SDLK_KP_DIVIDE;
    case key_code::KP_MULTIPLY: return SDLK_KP_MULTIPLY;
    case key_code::KP_MINUS: return SDLK_KP_MINUS;
    case key_code::KP_PLUS: return SDLK_KP_PLUS;
    case key_code::KP_ENTER: return SDLK_KP_ENTER;
    case key_code::KP_1: return SDLK_KP_1;
    case key_code::KP_2: return SDLK_KP_2;
    case key_code::KP_3: return SDLK_KP_3;
    case key_code::KP_4: return SDLK_KP_4;
    case key_code::KP_5: return SDLK_KP_5;
    case key_code::KP_6: return SDLK_KP_6;
    case key_code::KP_7: return SDLK_KP_7;
    case key_code::KP_8: return SDLK_KP_8;
    case key_code::KP_9: return SDLK_KP_9;
    case key_code::KP_0: return SDLK_KP_0;
    case key_code::KP_PERIOD: return SDLK_KP_PERIOD;
    case key_code::KP_COMMA: return SDLK_KP_COMMA;
    case key_code::KP_EQUALS: return SDLK_KP_EQUALS;
    case key_code::KP_EQUALSAS400: return SDLK_KP_EQUALSAS400;

    // Special keys
    case key_code::APPLICATION: return SDLK_APPLICATION;
    case key_code::POWER: return SDLK_POWER;
    case key_code::F13: return SDLK_F13;
    case key_code::F14: return SDLK_F14;
    case key_code::F15: return SDLK_F15;
    case key_code::F16: return SDLK_F16;
    case key_code::F17: return SDLK_F17;
    case key_code::F18: return SDLK_F18;
    case key_code::F19: return SDLK_F19;
    case key_code::F20: return SDLK_F20;
    case key_code::F21: return SDLK_F21;
    case key_code::F22: return SDLK_F22;
    case key_code::F23: return SDLK_F23;
    case key_code::F24: return SDLK_F24;
    case key_code::EXECUTE: return SDLK_EXECUTE;
    case key_code::HELP: return SDLK_HELP;
    case key_code::MENU: return SDLK_MENU;
    case key_code::SELECT: return SDLK_SELECT;
    case key_code::STOP: return SDLK_STOP;
    case key_code::AGAIN: return SDLK_AGAIN;
    case key_code::UNDO: return SDLK_UNDO;
    case key_code::CUT: return SDLK_CUT;
    case key_code::COPY: return SDLK_COPY;
    case key_code::PASTE: return SDLK_PASTE;
    case key_code::FIND: return SDLK_FIND;
    case key_code::MUTE: return SDLK_MUTE;
    case key_code::VOLUMEUP: return SDLK_VOLUMEUP;
    case key_code::VOLUMEDOWN: return SDLK_VOLUMEDOWN;
    case key_code::ALTERASE: return SDLK_ALTERASE;
    case key_code::SYSREQ: return SDLK_SYSREQ;
    case key_code::CANCEL: return SDLK_CANCEL;
    case key_code::CLEAR: return SDLK_CLEAR;
    case key_code::PRIOR: return SDLK_PRIOR;
    case key_code::RETURN2: return SDLK_RETURN2;
    case key_code::SEPARATOR: return SDLK_SEPARATOR;
    case key_code::KEY_OUT: return SDLK_OUT;
    case key_code::OPER: return SDLK_OPER;
    case key_code::CLEARAGAIN: return SDLK_CLEARAGAIN;
    case key_code::CRSEL: return SDLK_CRSEL;
    case key_code::EXSEL: return SDLK_EXSEL;
    case key_code::KP_00: return SDLK_KP_00;
    case key_code::KP_000: return SDLK_KP_000;
    case key_code::THOUSANDSSEPARATOR: return SDLK_THOUSANDSSEPARATOR;
    case key_code::DECIMALSEPARATOR: return SDLK_DECIMALSEPARATOR;
    case key_code::CURRENCYUNIT: return SDLK_CURRENCYUNIT;
    case key_code::CURRENCYSUBUNIT: return SDLK_CURRENCYSUBUNIT;
    case key_code::KP_LEFTPAREN: return SDLK_KP_LEFTPAREN;
    case key_code::KP_RIGHTPAREN: return SDLK_KP_RIGHTPAREN;
    case key_code::KP_LEFTBRACE: return SDLK_KP_LEFTBRACE;
    case key_code::KP_RIGHTBRACE: return SDLK_KP_RIGHTBRACE;
    case key_code::KP_TAB: return SDLK_KP_TAB;
    case key_code::KP_BACKSPACE: return SDLK_KP_BACKSPACE;
    case key_code::KP_A: return SDLK_KP_A;
    case key_code::KP_B: return SDLK_KP_B;
    case key_code::KP_C: return SDLK_KP_C;
    case key_code::KP_D: return SDLK_KP_D;
    case key_code::KP_E: return SDLK_KP_E;
    case key_code::KP_F: return SDLK_KP_F;
    case key_code::KP_XOR: return SDLK_KP_XOR;
    case key_code::KP_POWER: return SDLK_KP_POWER;
    case key_code::KP_PERCENT: return SDLK_KP_PERCENT;
    case key_code::KP_LESS: return SDLK_KP_LESS;
    case key_code::KP_GREATER: return SDLK_KP_GREATER;
    case key_code::KP_AMPERSAND: return SDLK_KP_AMPERSAND;
    case key_code::KP_DBLAMPERSAND: return SDLK_KP_DBLAMPERSAND;
    case key_code::KP_VERTICALBAR: return SDLK_KP_VERTICALBAR;
    case key_code::KP_DBLVERTICALBAR: return SDLK_KP_DBLVERTICALBAR;
    case key_code::KP_COLON: return SDLK_KP_COLON;
    case key_code::KP_HASH: return SDLK_KP_HASH;
    case key_code::KP_SPACE: return SDLK_KP_SPACE;
    case key_code::KP_AT: return SDLK_KP_AT;
    case key_code::KP_EXCLAM: return SDLK_KP_EXCLAM;
    case key_code::KP_MEMSTORE: return SDLK_KP_MEMSTORE;
    case key_code::KP_MEMRECALL: return SDLK_KP_MEMRECALL;
    case key_code::KP_MEMCLEAR: return SDLK_KP_MEMCLEAR;
    case key_code::KP_MEMADD: return SDLK_KP_MEMADD;
    case key_code::KP_MEMSUBTRACT: return SDLK_KP_MEMSUBTRACT;
    case key_code::KP_MEMMULTIPLY: return SDLK_KP_MEMMULTIPLY;
    case key_code::KP_MEMDIVIDE: return SDLK_KP_MEMDIVIDE;
    case key_code::KP_PLUSMINUS: return SDLK_KP_PLUSMINUS;
    case key_code::KP_CLEAR: return SDLK_KP_CLEAR;
    case key_code::KP_CLEARENTRY: return SDLK_KP_CLEARENTRY;
    case key_code::KP_BINARY: return SDLK_KP_BINARY;
    case key_code::KP_OCTAL: return SDLK_KP_OCTAL;
    case key_code::KP_DECIMAL: return SDLK_KP_DECIMAL;
    case key_code::KP_HEXADECIMAL: return SDLK_KP_HEXADECIMAL;
    case key_code::LCTRL: return SDLK_LCTRL;
    case key_code::LSHIFT: return SDLK_LSHIFT;
    case key_code::LALT: return SDLK_LALT;
    case key_code::LGUI: return SDLK_LGUI;
    case key_code::RCTRL: return SDLK_RCTRL;
    case key_code::RSHIFT: return SDLK_RSHIFT;
    case key_code::RALT: return SDLK_RALT;
    case key_code::RGUI: return SDLK_RGUI;
    case key_code::MODE: return SDLK_MODE;
    case key_code::AUDIONEXT: return SDLK_AUDIONEXT;
    case key_code::AUDIOPREV: return SDLK_AUDIOPREV;
    case key_code::AUDIOSTOP: return SDLK_AUDIOSTOP;
    case key_code::AUDIOPLAY: return SDLK_AUDIOPLAY;
    case key_code::AUDIOMUTE: return SDLK_AUDIOMUTE;
    case key_code::MEDIASELECT: return SDLK_MEDIASELECT;
    case key_code::WWW: return SDLK_WWW;
    case key_code::MAIL: return SDLK_MAIL;
    case key_code::CALCULATOR: return SDLK_CALCULATOR;
    case key_code::COMPUTER: return SDLK_COMPUTER;
    case key_code::AC_SEARCH: return SDLK_AC_SEARCH;
    case key_code::AC_HOME: return SDLK_AC_HOME;
    case key_code::AC_BACK: return SDLK_AC_BACK;
    case key_code::AC_FORWARD: return SDLK_AC_FORWARD;
    case key_code::AC_STOP: return SDLK_AC_STOP;
    case key_code::AC_REFRESH: return SDLK_AC_REFRESH;
    case key_code::AC_BOOKMARKS: return SDLK_AC_BOOKMARKS;
    case key_code::BRIGHTNESSDOWN: return SDLK_BRIGHTNESSDOWN;
    case key_code::BRIGHTNESSUP: return SDLK_BRIGHTNESSUP;
    case key_code::DISPLAYSWITCH: return SDLK_DISPLAYSWITCH;
    case key_code::KBDILLUMTOGGLE: return SDLK_KBDILLUMTOGGLE;
    case key_code::KBDILLUMDOWN: return SDLK_KBDILLUMDOWN;
    case key_code::KBDILLUMUP: return SDLK_KBDILLUMUP;
    case key_code::EJECT: return SDLK_EJECT;
    case key_code::SLEEP: return SDLK_SLEEP;
    case key_code::APP1: return SDLK_APP1;
    case key_code::APP2: return SDLK_APP2;
    case key_code::AUDIOREWIND: return SDLK_AUDIOREWIND;
    case key_code::AUDIOFASTFORWARD: return SDLK_AUDIOFASTFORWARD;
    case key_code::SOFTLEFT: return SDLK_SOFTLEFT;
    case key_code::SOFTRIGHT: return SDLK_SOFTRIGHT;
    case key_code::CALL: return SDLK_CALL;
    case key_code::ENDCALL: return SDLK_ENDCALL;
    }

    return SDLK_UNKNOWN;
}

auto convert_enum(SDL_Keycode code) -> key_code
{
    switch (code) {
    case SDLK_UNKNOWN: return key_code::UNKNOWN;
    case SDLK_RETURN: return key_code::RETURN;
    case SDLK_ESCAPE: return key_code::ESCAPE;
    case SDLK_BACKSPACE: return key_code::BACKSPACE;
    case SDLK_TAB: return key_code::TAB;
    case SDLK_SPACE: return key_code::SPACE;
    case SDLK_EXCLAIM: return key_code::EXCLAIM;
    case SDLK_QUOTEDBL: return key_code::QUOTEDBL;
    case SDLK_HASH: return key_code::HASH;
    case SDLK_PERCENT: return key_code::PERCENT;
    case SDLK_DOLLAR: return key_code::DOLLAR;
    case SDLK_AMPERSAND: return key_code::AMPERSAND;
    case SDLK_QUOTE: return key_code::QUOTE;
    case SDLK_LEFTPAREN: return key_code::LEFTPAREN;
    case SDLK_RIGHTPAREN: return key_code::RIGHTPAREN;
    case SDLK_ASTERISK: return key_code::ASTERISK;
    case SDLK_PLUS: return key_code::PLUS;
    case SDLK_COMMA: return key_code::COMMA;
    case SDLK_MINUS: return key_code::MINUS;
    case SDLK_PERIOD: return key_code::PERIOD;
    case SDLK_SLASH: return key_code::SLASH;
    case SDLK_0: return key_code::D0;
    case SDLK_1: return key_code::D1;
    case SDLK_2: return key_code::D2;
    case SDLK_3: return key_code::D3;
    case SDLK_4: return key_code::D4;
    case SDLK_5: return key_code::D5;
    case SDLK_6: return key_code::D6;
    case SDLK_7: return key_code::D7;
    case SDLK_8: return key_code::D8;
    case SDLK_9: return key_code::D9;
    case SDLK_COLON: return key_code::COLON;
    case SDLK_SEMICOLON: return key_code::SEMICOLON;
    case SDLK_LESS: return key_code::LESS;
    case SDLK_EQUALS: return key_code::EQUALS;
    case SDLK_GREATER: return key_code::GREATER;
    case SDLK_QUESTION: return key_code::QUESTION;
    case SDLK_AT: return key_code::AT;
    case SDLK_LEFTBRACKET: return key_code::LEFTBRACKET;
    case SDLK_BACKSLASH: return key_code::BACKSLASH;
    case SDLK_RIGHTBRACKET: return key_code::RIGHTBRACKET;
    case SDLK_CARET: return key_code::CARET;
    case SDLK_UNDERSCORE: return key_code::UNDERSCORE;
    case SDLK_BACKQUOTE: return key_code::BACKQUOTE;

    // Alphabet keys
    case SDLK_a: return key_code::a;
    case SDLK_b: return key_code::b;
    case SDLK_c: return key_code::c;
    case SDLK_d: return key_code::d;
    case SDLK_e: return key_code::e;
    case SDLK_f: return key_code::f;
    case SDLK_g: return key_code::g;
    case SDLK_h: return key_code::h;
    case SDLK_i: return key_code::i;
    case SDLK_j: return key_code::j;
    case SDLK_k: return key_code::k;
    case SDLK_l: return key_code::l;
    case SDLK_m: return key_code::m;
    case SDLK_n: return key_code::n;
    case SDLK_o: return key_code::o;
    case SDLK_p: return key_code::p;
    case SDLK_q: return key_code::q;
    case SDLK_r: return key_code::r;
    case SDLK_s: return key_code::s;
    case SDLK_t: return key_code::t;
    case SDLK_u: return key_code::u;
    case SDLK_v: return key_code::v;
    case SDLK_w: return key_code::w;
    case SDLK_x: return key_code::x;
    case SDLK_y: return key_code::y;
    case SDLK_z: return key_code::z;

    // Function keys
    case SDLK_CAPSLOCK: return key_code::CAPSLOCK;
    case SDLK_F1: return key_code::F1;
    case SDLK_F2: return key_code::F2;
    case SDLK_F3: return key_code::F3;
    case SDLK_F4: return key_code::F4;
    case SDLK_F5: return key_code::F5;
    case SDLK_F6: return key_code::F6;
    case SDLK_F7: return key_code::F7;
    case SDLK_F8: return key_code::F8;
    case SDLK_F9: return key_code::F9;
    case SDLK_F10: return key_code::F10;
    case SDLK_F11: return key_code::F11;
    case SDLK_F12: return key_code::F12;

    // Control and other keys
    case SDLK_PRINTSCREEN: return key_code::PRINTSCREEN;
    case SDLK_SCROLLLOCK: return key_code::SCROLLLOCK;
    case SDLK_PAUSE: return key_code::PAUSE;
    case SDLK_INSERT: return key_code::INSERT;
    case SDLK_HOME: return key_code::HOME;
    case SDLK_PAGEUP: return key_code::PAGEUP;
    case SDLK_DELETE: return key_code::DEL;
    case SDLK_END: return key_code::END;
    case SDLK_PAGEDOWN: return key_code::PAGEDOWN;
    case SDLK_RIGHT: return key_code::RIGHT;
    case SDLK_LEFT: return key_code::LEFT;
    case SDLK_DOWN: return key_code::DOWN;
    case SDLK_UP: return key_code::UP;

    // Numpad keys
    case SDLK_NUMLOCKCLEAR: return key_code::NUMLOCKCLEAR;
    case SDLK_KP_DIVIDE: return key_code::KP_DIVIDE;
    case SDLK_KP_MULTIPLY: return key_code::KP_MULTIPLY;
    case SDLK_KP_MINUS: return key_code::KP_MINUS;
    case SDLK_KP_PLUS: return key_code::KP_PLUS;
    case SDLK_KP_ENTER: return key_code::KP_ENTER;
    case SDLK_KP_1: return key_code::KP_1;
    case SDLK_KP_2: return key_code::KP_2;
    case SDLK_KP_3: return key_code::KP_3;
    case SDLK_KP_4: return key_code::KP_4;
    case SDLK_KP_5: return key_code::KP_5;
    case SDLK_KP_6: return key_code::KP_6;
    case SDLK_KP_7: return key_code::KP_7;
    case SDLK_KP_8: return key_code::KP_8;
    case SDLK_KP_9: return key_code::KP_9;
    case SDLK_KP_0: return key_code::KP_0;
    case SDLK_KP_PERIOD: return key_code::KP_PERIOD;
    case SDLK_KP_COMMA: return key_code::KP_COMMA;
    case SDLK_KP_EQUALS: return key_code::KP_EQUALS;
    case SDLK_KP_EQUALSAS400: return key_code::KP_EQUALSAS400;

    // Special keys
    case SDLK_APPLICATION: return key_code::APPLICATION;
    case SDLK_POWER: return key_code::POWER;
    case SDLK_F13: return key_code::F13;
    case SDLK_F14: return key_code::F14;
    case SDLK_F15: return key_code::F15;
    case SDLK_F16: return key_code::F16;
    case SDLK_F17: return key_code::F17;
    case SDLK_F18: return key_code::F18;
    case SDLK_F19: return key_code::F19;
    case SDLK_F20: return key_code::F20;
    case SDLK_F21: return key_code::F21;
    case SDLK_F22: return key_code::F22;
    case SDLK_F23: return key_code::F23;
    case SDLK_F24: return key_code::F24;
    case SDLK_EXECUTE: return key_code::EXECUTE;
    case SDLK_HELP: return key_code::HELP;
    case SDLK_MENU: return key_code::MENU;
    case SDLK_SELECT: return key_code::SELECT;
    case SDLK_STOP: return key_code::STOP;
    case SDLK_AGAIN: return key_code::AGAIN;
    case SDLK_UNDO: return key_code::UNDO;
    case SDLK_CUT: return key_code::CUT;
    case SDLK_COPY: return key_code::COPY;
    case SDLK_PASTE: return key_code::PASTE;
    case SDLK_FIND: return key_code::FIND;
    case SDLK_MUTE: return key_code::MUTE;
    case SDLK_VOLUMEUP: return key_code::VOLUMEUP;
    case SDLK_VOLUMEDOWN: return key_code::VOLUMEDOWN;
    case SDLK_ALTERASE: return key_code::ALTERASE;
    case SDLK_SYSREQ: return key_code::SYSREQ;
    case SDLK_CANCEL: return key_code::CANCEL;
    case SDLK_CLEAR: return key_code::CLEAR;
    case SDLK_PRIOR: return key_code::PRIOR;
    case SDLK_RETURN2: return key_code::RETURN2;
    case SDLK_SEPARATOR: return key_code::SEPARATOR;
    case SDLK_OUT: return key_code::KEY_OUT;
    case SDLK_OPER: return key_code::OPER;
    case SDLK_CLEARAGAIN: return key_code::CLEARAGAIN;
    case SDLK_CRSEL: return key_code::CRSEL;
    case SDLK_EXSEL: return key_code::EXSEL;
    case SDLK_KP_00: return key_code::KP_00;
    case SDLK_KP_000: return key_code::KP_000;
    case SDLK_THOUSANDSSEPARATOR: return key_code::THOUSANDSSEPARATOR;
    case SDLK_DECIMALSEPARATOR: return key_code::DECIMALSEPARATOR;
    case SDLK_CURRENCYUNIT: return key_code::CURRENCYUNIT;
    case SDLK_CURRENCYSUBUNIT: return key_code::CURRENCYSUBUNIT;
    case SDLK_KP_LEFTPAREN: return key_code::KP_LEFTPAREN;
    case SDLK_KP_RIGHTPAREN: return key_code::KP_RIGHTPAREN;
    case SDLK_KP_LEFTBRACE: return key_code::KP_LEFTBRACE;
    case SDLK_KP_RIGHTBRACE: return key_code::KP_RIGHTBRACE;
    case SDLK_KP_TAB: return key_code::KP_TAB;
    case SDLK_KP_BACKSPACE: return key_code::KP_BACKSPACE;
    case SDLK_KP_A: return key_code::KP_A;
    case SDLK_KP_B: return key_code::KP_B;
    case SDLK_KP_C: return key_code::KP_C;
    case SDLK_KP_D: return key_code::KP_D;
    case SDLK_KP_E: return key_code::KP_E;
    case SDLK_KP_F: return key_code::KP_F;
    case SDLK_KP_XOR: return key_code::KP_XOR;
    case SDLK_KP_POWER: return key_code::KP_POWER;
    case SDLK_KP_PERCENT: return key_code::KP_PERCENT;
    case SDLK_KP_LESS: return key_code::KP_LESS;
    case SDLK_KP_GREATER: return key_code::KP_GREATER;
    case SDLK_KP_AMPERSAND: return key_code::KP_AMPERSAND;
    case SDLK_KP_DBLAMPERSAND: return key_code::KP_DBLAMPERSAND;
    case SDLK_KP_VERTICALBAR: return key_code::KP_VERTICALBAR;
    case SDLK_KP_DBLVERTICALBAR: return key_code::KP_DBLVERTICALBAR;
    case SDLK_KP_COLON: return key_code::KP_COLON;
    case SDLK_KP_HASH: return key_code::KP_HASH;
    case SDLK_KP_SPACE: return key_code::KP_SPACE;
    case SDLK_KP_AT: return key_code::KP_AT;
    case SDLK_KP_EXCLAM: return key_code::KP_EXCLAM;
    case SDLK_KP_MEMSTORE: return key_code::KP_MEMSTORE;
    case SDLK_KP_MEMRECALL: return key_code::KP_MEMRECALL;
    case SDLK_KP_MEMCLEAR: return key_code::KP_MEMCLEAR;
    case SDLK_KP_MEMADD: return key_code::KP_MEMADD;
    case SDLK_KP_MEMSUBTRACT: return key_code::KP_MEMSUBTRACT;
    case SDLK_KP_MEMMULTIPLY: return key_code::KP_MEMMULTIPLY;
    case SDLK_KP_MEMDIVIDE: return key_code::KP_MEMDIVIDE;
    case SDLK_KP_PLUSMINUS: return key_code::KP_PLUSMINUS;
    case SDLK_KP_CLEAR: return key_code::KP_CLEAR;
    case SDLK_KP_CLEARENTRY: return key_code::KP_CLEARENTRY;
    case SDLK_KP_BINARY: return key_code::KP_BINARY;
    case SDLK_KP_OCTAL: return key_code::KP_OCTAL;
    case SDLK_KP_DECIMAL: return key_code::KP_DECIMAL;
    case SDLK_KP_HEXADECIMAL: return key_code::KP_HEXADECIMAL;
    case SDLK_LCTRL: return key_code::LCTRL;
    case SDLK_LSHIFT: return key_code::LSHIFT;
    case SDLK_LALT: return key_code::LALT;
    case SDLK_LGUI: return key_code::LGUI;
    case SDLK_RCTRL: return key_code::RCTRL;
    case SDLK_RSHIFT: return key_code::RSHIFT;
    case SDLK_RALT: return key_code::RALT;
    case SDLK_RGUI: return key_code::RGUI;
    case SDLK_MODE: return key_code::MODE;
    case SDLK_AUDIONEXT: return key_code::AUDIONEXT;
    case SDLK_AUDIOPREV: return key_code::AUDIOPREV;
    case SDLK_AUDIOSTOP: return key_code::AUDIOSTOP;
    case SDLK_AUDIOPLAY: return key_code::AUDIOPLAY;
    case SDLK_AUDIOMUTE: return key_code::AUDIOMUTE;
    case SDLK_MEDIASELECT: return key_code::MEDIASELECT;
    case SDLK_WWW: return key_code::WWW;
    case SDLK_MAIL: return key_code::MAIL;
    case SDLK_CALCULATOR: return key_code::CALCULATOR;
    case SDLK_COMPUTER: return key_code::COMPUTER;
    case SDLK_AC_SEARCH: return key_code::AC_SEARCH;
    case SDLK_AC_HOME: return key_code::AC_HOME;
    case SDLK_AC_BACK: return key_code::AC_BACK;
    case SDLK_AC_FORWARD: return key_code::AC_FORWARD;
    case SDLK_AC_STOP: return key_code::AC_STOP;
    case SDLK_AC_REFRESH: return key_code::AC_REFRESH;
    case SDLK_AC_BOOKMARKS: return key_code::AC_BOOKMARKS;
    case SDLK_BRIGHTNESSDOWN: return key_code::BRIGHTNESSDOWN;
    case SDLK_BRIGHTNESSUP: return key_code::BRIGHTNESSUP;
    case SDLK_DISPLAYSWITCH: return key_code::DISPLAYSWITCH;
    case SDLK_KBDILLUMTOGGLE: return key_code::KBDILLUMTOGGLE;
    case SDLK_KBDILLUMDOWN: return key_code::KBDILLUMDOWN;
    case SDLK_KBDILLUMUP: return key_code::KBDILLUMUP;
    case SDLK_EJECT: return key_code::EJECT;
    case SDLK_SLEEP: return key_code::SLEEP;
    case SDLK_APP1: return key_code::APP1;
    case SDLK_APP2: return key_code::APP2;
    case SDLK_AUDIOREWIND: return key_code::AUDIOMUTE;
    case SDLK_AUDIOFASTFORWARD: return key_code::AUDIOFASTFORWARD;
    case SDLK_SOFTLEFT: return key_code::SOFTLEFT;
    case SDLK_SOFTRIGHT: return key_code::SOFTRIGHT;
    case SDLK_CALL: return key_code::CALL;
    case SDLK_ENDCALL: return key_code::ENDCALL;
    }
    return static_cast<key_code>(code);
}
}
